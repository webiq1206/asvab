# ASVAB Prep Monitoring Stack
# Military-grade monitoring and observability

version: '3.8'

services:
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: asvab-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.route-prefix=/'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - ./monitoring/recording_rules.yml:/etc/prometheus/recording_rules.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - asvab-monitoring
    depends_on:
      - node-exporter
      - cadvisor
    labels:
      - "com.docker.compose.service=prometheus"
      - "environment=monitoring"

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: asvab-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin123}
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY:-grafana_secret_key_2024}
      GF_SERVER_DOMAIN: ${GRAFANA_DOMAIN:-localhost}
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3000}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel,grafana-polystat-panel
      GF_FEATURE_TOGGLES_ENABLE: publicDashboards
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /etc/grafana/provisioning/dashboards/asvab-overview.json
      GF_USERS_ALLOW_SIGN_UP: false
      GF_USERS_ALLOW_ORG_CREATE: false
      GF_AUTH_ANONYMOUS_ENABLED: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/notifiers:/etc/grafana/provisioning/notifiers:ro
    ports:
      - "3000:3000"
    networks:
      - asvab-monitoring
    depends_on:
      - prometheus
    labels:
      - "com.docker.compose.service=grafana"
      - "environment=monitoring"

  # AlertManager - Alert Management
  alertmanager:
    image: prom/alertmanager:latest
    container_name: asvab-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./monitoring/alert_templates:/etc/alertmanager/templates:ro
      - alertmanager-data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - asvab-monitoring
    labels:
      - "com.docker.compose.service=alertmanager"
      - "environment=monitoring"

  # Node Exporter - Host Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: asvab-node-exporter
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.textfile.directory=/var/lib/node_exporter/textfile_collector'
      - '--collector.systemd'
      - '--collector.processes'
    volumes:
      - /:/host:ro,rslave
      - /var/lib/node_exporter:/var/lib/node_exporter:rw
    ports:
      - "9100:9100"
    networks:
      - asvab-monitoring
    pid: host
    labels:
      - "com.docker.compose.service=node-exporter"
      - "environment=monitoring"

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: asvab-cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    ports:
      - "8080:8080"
    networks:
      - asvab-monitoring
    labels:
      - "com.docker.compose.service=cadvisor"
      - "environment=monitoring"

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: asvab-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    ports:
      - "3100:3100"
    networks:
      - asvab-monitoring
    labels:
      - "com.docker.compose.service=loki"
      - "environment=monitoring"

  # Promtail - Log Collector
  promtail:
    image: grafana/promtail:latest
    container_name: asvab-promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - promtail-data:/promtail
    networks:
      - asvab-monitoring
    depends_on:
      - loki
    labels:
      - "com.docker.compose.service=promtail"
      - "environment=monitoring"

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: asvab-jaeger
    restart: unless-stopped
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
      - "14268:14268"  # HTTP
      - "14269:14269"  # Admin
      - "9411:9411"    # Zipkin
    networks:
      - asvab-monitoring
    labels:
      - "com.docker.compose.service=jaeger"
      - "environment=monitoring"

  # Redis Exporter - Redis Metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: asvab-redis-exporter
    restart: unless-stopped
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_EXPORTER_LOG_FORMAT: json
    ports:
      - "9121:9121"
    networks:
      - asvab-monitoring
    depends_on:
      - redis
    labels:
      - "com.docker.compose.service=redis-exporter"
      - "environment=monitoring"

  # PostgreSQL Exporter - Database Metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: asvab-postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: postgresql://asvab_user:${POSTGRES_PASSWORD}@postgres:5432/asvab_prep?sslmode=disable
      PG_EXPORTER_EXTEND_QUERY_PATH: /etc/postgres_exporter/queries.yaml
    volumes:
      - ./monitoring/postgres-queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    ports:
      - "9187:9187"
    networks:
      - asvab-monitoring
    depends_on:
      - postgres
    labels:
      - "com.docker.compose.service=postgres-exporter"
      - "environment=monitoring"

  # Nginx Exporter - Web Server Metrics
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: asvab-nginx-exporter
    restart: unless-stopped
    command:
      - -nginx.scrape-uri=http://nginx:8080/nginx_status
      - -web.listen-address=:9113
    ports:
      - "9113:9113"
    networks:
      - asvab-monitoring
    depends_on:
      - nginx
    labels:
      - "com.docker.compose.service=nginx-exporter"
      - "environment=monitoring"

  # Blackbox Exporter - Endpoint Monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    container_name: asvab-blackbox-exporter
    restart: unless-stopped
    command:
      - '--config.file=/etc/blackbox_exporter/config.yml'
    volumes:
      - ./monitoring/blackbox-config.yml:/etc/blackbox_exporter/config.yml:ro
    ports:
      - "9115:9115"
    networks:
      - asvab-monitoring
    labels:
      - "com.docker.compose.service=blackbox-exporter"
      - "environment=monitoring"

  # Health Monitor - Custom Health Checks
  health-monitor:
    build:
      context: .
      dockerfile: monitoring/Dockerfile.health-monitor
    container_name: asvab-health-monitor
    restart: unless-stopped
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      BASE_URL: ${BASE_URL:-http://backend:3001}
      CHECK_INTERVAL: ${CHECK_INTERVAL:-60}
      MAX_RESPONSE_TIME: ${MAX_RESPONSE_TIME:-5000}
      ALERT_WEBHOOK: ${ALERT_WEBHOOK:-}
      ALERT_EMAIL: ${ALERT_EMAIL:-}
      PROMETHEUS_PUSHGATEWAY: http://pushgateway:9091
    volumes:
      - ./scripts/health-monitor.sh:/app/health-monitor.sh:ro
      - health-monitor-data:/var/log
      - ./reports:/app/reports
    networks:
      - asvab-monitoring
    depends_on:
      - backend
      - pushgateway
    labels:
      - "com.docker.compose.service=health-monitor"
      - "environment=monitoring"

  # Pushgateway - Metrics Push Gateway
  pushgateway:
    image: prom/pushgateway:latest
    container_name: asvab-pushgateway
    restart: unless-stopped
    ports:
      - "9091:9091"
    networks:
      - asvab-monitoring
    labels:
      - "com.docker.compose.service=pushgateway"
      - "environment=monitoring"

  # Uptime Kuma - Uptime Monitoring
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: asvab-uptime-kuma
    restart: unless-stopped
    volumes:
      - uptime-kuma-data:/app/data
    ports:
      - "3001:3001"
    networks:
      - asvab-monitoring
    labels:
      - "com.docker.compose.service=uptime-kuma"
      - "environment=monitoring"

volumes:
  prometheus-data:
    driver: local
    labels:
      service: prometheus
      environment: monitoring
  grafana-data:
    driver: local
    labels:
      service: grafana
      environment: monitoring
  alertmanager-data:
    driver: local
    labels:
      service: alertmanager
      environment: monitoring
  loki-data:
    driver: local
    labels:
      service: loki
      environment: monitoring
  promtail-data:
    driver: local
    labels:
      service: promtail
      environment: monitoring
  health-monitor-data:
    driver: local
    labels:
      service: health-monitor
      environment: monitoring
  uptime-kuma-data:
    driver: local
    labels:
      service: uptime-kuma
      environment: monitoring

networks:
  asvab-monitoring:
    driver: bridge
    labels:
      service: monitoring
      environment: monitoring
  default:
    external:
      name: asvab-prep_default