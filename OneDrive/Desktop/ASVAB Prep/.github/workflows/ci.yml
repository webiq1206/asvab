name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Testing
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: asvab_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Setup test database
      run: |
        cd backend
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/asvab_test

    - name: Run backend tests
      run: |
        cd backend
        npm run test:ci
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/asvab_test
        TEST_DATABASE_URL: postgresql://test:test@localhost:5432/asvab_test
        JWT_SECRET: test-jwt-secret
        NODE_ENV: test

    - name: Run integration tests
      run: |
        cd backend
        npm run test:integration
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/asvab_test
        TEST_DATABASE_URL: postgresql://test:test@localhost:5432/asvab_test
        JWT_SECRET: test-jwt-secret

    - name: Run E2E tests
      run: |
        cd backend
        npm run test:e2e
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/asvab_test
        TEST_DATABASE_URL: postgresql://test:test@localhost:5432/asvab_test
        JWT_SECRET: test-jwt-secret

    - name: Generate test coverage
      run: |
        cd backend
        npm run test:coverage
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/asvab_test
        TEST_DATABASE_URL: postgresql://test:test@localhost:5432/asvab_test
        JWT_SECRET: test-jwt-secret

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Security Testing
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: backend-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Run security audit
      run: |
        cd backend
        npm audit --audit-level=moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --project-name=asvab-backend
        command: test

    - name: Run OWASP ZAP security scan
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: 'http://localhost:3001'

  # Mobile Testing
  mobile-tests:
    name: Mobile Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json

    - name: Install mobile dependencies
      run: |
        cd mobile
        npm ci

    - name: Run mobile unit tests
      run: |
        cd mobile
        npm run test:ci

    - name: Run mobile component tests
      run: |
        cd mobile
        npm run test:components

    - name: Generate mobile test coverage
      run: |
        cd mobile
        npm run test:coverage

    - name: Upload mobile coverage
      uses: codecov/codecov-action@v3
      with:
        file: mobile/coverage/lcov.info
        flags: mobile
        name: mobile-coverage

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: backend-tests

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: asvab_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Setup performance test database
      run: |
        cd backend
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/asvab_perf

    - name: Start backend server
      run: |
        cd backend
        npm run start:test &
        sleep 10
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/asvab_perf
        PORT: 3001

    - name: Run WebSocket performance tests
      run: |
        cd backend
        npm run test:performance
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/asvab_perf
        TEST_SERVER_URL: http://localhost:3001

    - name: Run API load tests with Artillery
      run: |
        cd backend
        npx artillery run test/performance/load-test.yml

  # Database Migration Testing
  migration-tests:
    name: Database Migration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: asvab_migration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Test fresh migrations
      run: |
        cd backend
        npx prisma migrate deploy
        npx prisma db seed
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/asvab_migration

    - name: Run migration tests
      run: |
        cd backend
        npm run test:migrations
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/asvab_migration

    - name: Validate schema integrity
      run: |
        cd backend
        npx prisma validate
        npx prisma format --check

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Install mobile dependencies
      run: |
        cd mobile
        npm ci

    - name: Run backend linting
      run: |
        cd backend
        npm run lint

    - name: Run backend type checking
      run: |
        cd backend
        npm run type-check

    - name: Run mobile linting
      run: |
        cd mobile
        npm run lint

    - name: Run mobile type checking
      run: |
        cd mobile
        npm run type-check

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Build Testing
  build-tests:
    name: Build Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup EAS CLI
      run: npm install -g @expo/eas-cli

    - name: Build backend
      run: |
        cd backend
        npm ci
        npm run build

    - name: Test backend build
      run: |
        cd backend
        npm run start:prod &
        sleep 10
        curl -f http://localhost:3001/api/health || exit 1

    - name: Install mobile dependencies
      run: |
        cd mobile
        npm ci

    - name: Build mobile app (development)
      run: |
        cd mobile
        npx expo export --platform all

    - name: Validate mobile bundle
      run: |
        cd mobile
        ls -la dist/
        [ -d "dist/_expo" ] || exit 1

  # Military Content Validation
  military-content-tests:
    name: Military Content Validation
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: asvab_content
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Setup content validation database
      run: |
        cd backend
        npx prisma migrate deploy
        npx prisma db seed
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/asvab_content

    - name: Validate military branch data
      run: |
        cd backend
        npm run test:military-content
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/asvab_content

    - name: Validate ASVAB question authenticity
      run: |
        cd backend
        npm run validate:questions

    - name: Check military terminology consistency
      run: |
        cd backend
        npm run validate:terminology

  # Deployment Readiness
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [backend-tests, mobile-tests, security-tests, performance-tests, code-quality]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Check deployment configuration
      run: |
        # Validate environment configurations
        [ -f "backend/.env.example" ] || exit 1
        [ -f "mobile/app.json" ] || exit 1

    - name: Validate Docker configuration
      run: |
        cd backend
        docker build -t asvab-backend:test .
        docker run --rm -d -p 3001:3001 --name asvab-test asvab-backend:test
        sleep 10
        curl -f http://localhost:3001/api/health || exit 1
        docker stop asvab-test

    - name: Check mobile build readiness
      run: |
        cd mobile
        npm ci
        # Validate EAS configuration
        npx eas build:configure --platform all --non-interactive

    - name: Validate database migrations
      run: |
        cd backend
        npx prisma migrate diff --preview-feature

    - name: Security final check
      run: |
        # Check for sensitive data in codebase
        ! grep -r "API_KEY\|SECRET\|PASSWORD" --include="*.ts" --include="*.js" --exclude-dir=node_modules . || exit 1

# Environment-specific deployment jobs would follow here
# (staging, production, etc.)

  # Notification
  notify-completion:
    name: Notify CI Completion
    runs-on: ubuntu-latest
    needs: [backend-tests, mobile-tests, security-tests, performance-tests]
    if: always()

    steps:
    - name: Notify success
      if: needs.backend-tests.result == 'success' && needs.mobile-tests.result == 'success'
      run: |
        echo "✅ All ASVAB Prep tests passed! Ready for military excellence! 🎖️"

    - name: Notify failure
      if: needs.backend-tests.result == 'failure' || needs.mobile-tests.result == 'failure'
      run: |
        echo "❌ Tests failed. Military precision requires all systems operational!"
        exit 1